# -*- coding: utf-8 -*-
"""ML_Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KiT71eHFZib1zNLkmEPN2DwrKinxGPqR
"""

import joblib
import pandas as pd

classifier = joblib.load('logistic_regression_model.pkl')
vectorizer = joblib.load('tfidf_vectorizer.pkl')
train_data = pd.read_csv('processed_train_data.csv')

print(train_data['processed_text'].isna().sum())

# Dropping rows with NaN in the 'processed_text' column
train_data = train_data.dropna(subset=['processed_text'])

# Replacing NaN with an empty string
train_data['processed_text'] = train_data['processed_text'].fillna('')

"""•	Cluster tweets/posts to identify latent sentiment groups or trends."""

from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Extracting TF-IDF features for clustering
X_tfidf = vectorizer.transform(train_data['processed_text'])

# Applying KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=42)
train_data['cluster'] = kmeans.fit_predict(X_tfidf)

# Visualizing clusters using PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_tfidf.toarray())

plt.figure(figsize=(10, 6))
for cluster in range(3):
    plt.scatter(
        X_pca[train_data['cluster'] == cluster, 0],
        X_pca[train_data['cluster'] == cluster, 1],
        label=f"Cluster {cluster}"
    )
plt.title('Clusters of Sentiments')
plt.legend()
plt.show()

"""•	Identify top influencers or users driving specific sentiments."""

top_users = train_data.groupby(['sentiment', 'user'])['text'].count().reset_index()
top_users = top_users.sort_values(by='text', ascending=False).groupby('sentiment').head(10)

for sentiment, group in top_users.groupby('sentiment'):
    print(f"Top influencers for {sentiment} sentiment:")
    print(group[['user', 'text']])
    print("\n")